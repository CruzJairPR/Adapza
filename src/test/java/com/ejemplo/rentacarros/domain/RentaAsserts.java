package com.ejemplo.rentacarros.domain;

import static com.ejemplo.rentacarros.domain.AssertUtils.bigDecimalCompareTo;
import static com.ejemplo.rentacarros.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class RentaAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRentaAllPropertiesEquals(Renta expected, Renta actual) {
        assertRentaAutoGeneratedPropertiesEquals(expected, actual);
        assertRentaAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRentaAllUpdatablePropertiesEquals(Renta expected, Renta actual) {
        assertRentaUpdatableFieldsEquals(expected, actual);
        assertRentaUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRentaAutoGeneratedPropertiesEquals(Renta expected, Renta actual) {
        assertThat(actual)
            .as("Verify Renta auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRentaUpdatableFieldsEquals(Renta expected, Renta actual) {
        assertThat(actual)
            .as("Verify Renta relevant properties")
            .satisfies(a ->
                assertThat(a.getFechaInicio())
                    .as("check fechaInicio")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getFechaInicio())
            )
            .satisfies(a ->
                assertThat(a.getFechaFin()).as("check fechaFin").usingComparator(zonedDataTimeSameInstant).isEqualTo(expected.getFechaFin())
            )
            .satisfies(a ->
                assertThat(a.getPrecioTotal())
                    .as("check precioTotal")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getPrecioTotal())
            )
            .satisfies(a -> assertThat(a.getEstado()).as("check estado").isEqualTo(expected.getEstado()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRentaUpdatableRelationshipsEquals(Renta expected, Renta actual) {
        assertThat(actual)
            .as("Verify Renta relationships")
            .satisfies(a -> assertThat(a.getCarro()).as("check carro").isEqualTo(expected.getCarro()))
            .satisfies(a -> assertThat(a.getCliente()).as("check cliente").isEqualTo(expected.getCliente()));
    }
}
