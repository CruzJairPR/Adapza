package com.ejemplo.rentacarros.domain;

import static com.ejemplo.rentacarros.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class CombustibleAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCombustibleAllPropertiesEquals(Combustible expected, Combustible actual) {
        assertCombustibleAutoGeneratedPropertiesEquals(expected, actual);
        assertCombustibleAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCombustibleAllUpdatablePropertiesEquals(Combustible expected, Combustible actual) {
        assertCombustibleUpdatableFieldsEquals(expected, actual);
        assertCombustibleUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCombustibleAutoGeneratedPropertiesEquals(Combustible expected, Combustible actual) {
        assertThat(actual)
            .as("Verify Combustible auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCombustibleUpdatableFieldsEquals(Combustible expected, Combustible actual) {
        assertThat(actual)
            .as("Verify Combustible relevant properties")
            .satisfies(a -> assertThat(a.getNivelActual()).as("check nivelActual").isEqualTo(expected.getNivelActual()))
            .satisfies(a -> assertThat(a.getTipo()).as("check tipo").isEqualTo(expected.getTipo()))
            .satisfies(a ->
                assertThat(a.getFechaRegistro())
                    .as("check fechaRegistro")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getFechaRegistro())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCombustibleUpdatableRelationshipsEquals(Combustible expected, Combustible actual) {
        assertThat(actual)
            .as("Verify Combustible relationships")
            .satisfies(a -> assertThat(a.getCarro()).as("check carro").isEqualTo(expected.getCarro()));
    }
}
